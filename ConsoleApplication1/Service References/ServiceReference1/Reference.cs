//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference1.Property365Service")]
    public interface Property365Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/GetAgentList", ReplyAction="urn:Property365Service/GetAgentListResponse")]
        PropertyMe.EF.Agent[] GetAgentList();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/GetAgentList", ReplyAction="urn:Property365Service/GetAgentListResponse")]
        System.Threading.Tasks.Task<PropertyMe.EF.Agent[]> GetAgentListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/GetAgent", ReplyAction="urn:Property365Service/GetAgentResponse")]
        PropertyMe.EF.Agent GetAgent(string agentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/GetAgent", ReplyAction="urn:Property365Service/GetAgentResponse")]
        System.Threading.Tasks.Task<PropertyMe.EF.Agent> GetAgentAsync(string agentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/AddAgent", ReplyAction="urn:Property365Service/AddAgentResponse")]
        bool AddAgent(PropertyMe.EF.Agent newAgent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/AddAgent", ReplyAction="urn:Property365Service/AddAgentResponse")]
        System.Threading.Tasks.Task<bool> AddAgentAsync(PropertyMe.EF.Agent newAgent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/UpdateAgent", ReplyAction="urn:Property365Service/UpdateAgentResponse")]
        bool UpdateAgent(PropertyMe.EF.Agent agent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/UpdateAgent", ReplyAction="urn:Property365Service/UpdateAgentResponse")]
        System.Threading.Tasks.Task<bool> UpdateAgentAsync(PropertyMe.EF.Agent agent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/DeleteAgent", ReplyAction="urn:Property365Service/DeleteAgentResponse")]
        bool DeleteAgent(string agentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Property365Service/DeleteAgent", ReplyAction="urn:Property365Service/DeleteAgentResponse")]
        System.Threading.Tasks.Task<bool> DeleteAgentAsync(string agentID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Property365ServiceChannel : ConsoleApplication1.ServiceReference1.Property365Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Property365ServiceClient : System.ServiceModel.ClientBase<ConsoleApplication1.ServiceReference1.Property365Service>, ConsoleApplication1.ServiceReference1.Property365Service {
        
        public Property365ServiceClient() {
        }
        
        public Property365ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Property365ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Property365ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Property365ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PropertyMe.EF.Agent[] GetAgentList() {
            return base.Channel.GetAgentList();
        }
        
        public System.Threading.Tasks.Task<PropertyMe.EF.Agent[]> GetAgentListAsync() {
            return base.Channel.GetAgentListAsync();
        }
        
        public PropertyMe.EF.Agent GetAgent(string agentID) {
            return base.Channel.GetAgent(agentID);
        }
        
        public System.Threading.Tasks.Task<PropertyMe.EF.Agent> GetAgentAsync(string agentID) {
            return base.Channel.GetAgentAsync(agentID);
        }
        
        public bool AddAgent(PropertyMe.EF.Agent newAgent) {
            return base.Channel.AddAgent(newAgent);
        }
        
        public System.Threading.Tasks.Task<bool> AddAgentAsync(PropertyMe.EF.Agent newAgent) {
            return base.Channel.AddAgentAsync(newAgent);
        }
        
        public bool UpdateAgent(PropertyMe.EF.Agent agent) {
            return base.Channel.UpdateAgent(agent);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAgentAsync(PropertyMe.EF.Agent agent) {
            return base.Channel.UpdateAgentAsync(agent);
        }
        
        public bool DeleteAgent(string agentID) {
            return base.Channel.DeleteAgent(agentID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAgentAsync(string agentID) {
            return base.Channel.DeleteAgentAsync(agentID);
        }
    }
}
